# Étape 1 : Choisir l’image de base
FROM python:3.11-slim

# Étape 2 : Définir le dossier de travail
WORKDIR /app

# Étape 3 : Copier les fichiers dans l’image Docker
COPY api_test_model.py .
COPY random_forest_best_model.pkl .

# Étape 4 : Installer Flask et joblib
RUN pip install --no-cache-dir flask scikit-learn joblib numpy

# Étape 5 : Exposer le port
EXPOSE 5000

# Étape 6 : Lancer l'application Flask
CMD ["python", "api_test_model.py"]
# Étape 7 : Ajouter des commentaires
# - FROM : Spécifie l'image de base à utiliser.
# - WORKDIR : Définit le répertoire de travail dans l'image Docker.
# - COPY : Copie les fichiers nécessaires dans l'image Docker.
# - RUN : Installe les dépendances nécessaires.
# - EXPOSE : Expose le port 5000 pour l'application Flask.
# - CMD : Définit la commande à exécuter lorsque le conteneur démarre
# - Les commentaires expliquent chaque étape du Dockerfile.
# - Assurez-vous que le fichier random_forest_best_model.pkl est dans le même ré
#   répertoire que le Dockerfile ou ajustez le chemin dans la commande COPY.
# - Vous pouvez remplacer random_forest_best_model.pkl par le nom de votre modèle
#   si vous utilisez un autre modèle.
# - Pour construire l'image Docker, utilisez la commande :
#   docker build -t nom_de_l_image .
# - Pour exécuter le conteneur, utilisez la commande :
#   docker run -p 5000:5000 nom_de_l_image
# - Vous pouvez ensuite accéder à l'API Flask à l'adresse http://localhost:500
# - Assurez-vous que Docker est installé et en cours d'exécution sur votre machine.